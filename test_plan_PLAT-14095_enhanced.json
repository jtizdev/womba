{
  "story": {
    "key": "PLAT-14095",
    "summary": "PAP - Layout Modernization - Environment Dashboard - Basic capabillities",
    "description": "Description As PlainID provides a platform for managing Policies, it is essential to equip users with a dashboard that enhances their ability to manage effectively, gain visibility, and extract actionable insights. To meet this need, we are introducing a modern, refreshed dashboard experience designed to help users better understand and interact with key data. The new dashboard will feature a professional and visually engaging interface, built on top of existing metrics. It will incorporate modern data visualization elements such as bar charts, line graphs, and other visual tools to present information clearly and intuitively. Key performance indicators (KPIs) will be showcased through prominent cards that highlight critical metrics at a glance. Additionally, the dashboard will offer flexibility through customization options, allowing users to rearrange widgets and select the metrics most relevant to their needs. Detailed Requirements PRD:    Figma:    In scope Acceptance Criteria",
    "status": "Done",
    "priority": "High"
  },
  "summary": "These tests verify the functionality and usability of the new Environment Dashboard in the PAP, focusing on drag-and-drop capabilities, widget customization, and integration with existing metrics.",
  "test_cases": [
    {
      "title": "Verify Drag and Drop of Widgets",
      "description": "WHY: Users need to customize their dashboard layout. WHAT: Verify widgets can be dragged and dropped to new positions.",
      "preconditions": "User is logged into the dashboard with at least three widgets displayed.",
      "steps": [
        {
          "step_number": 1,
          "action": "Click and hold the drag handle of the first widget.",
          "expected_result": "Widget is selected for dragging.",
          "test_data": null
        },
        {
          "step_number": 2,
          "action": "Drag the widget to a new position between the second and third widgets.",
          "expected_result": "Placeholder appears between the second and third widgets.",
          "test_data": null
        },
        {
          "step_number": 3,
          "action": "Release the mouse button to drop the widget.",
          "expected_result": "Widget is repositioned between the second and third widgets.",
          "test_data": null
        }
      ],
      "expected_result": "Widgets can be rearranged using drag-and-drop functionality.",
      "priority": "high",
      "test_type": "functional",
      "tags": [
        "drag-and-drop",
        "widget-customization"
      ],
      "automation_candidate": true,
      "estimated_time": null,
      "risk_level": "medium",
      "related_existing_tests": []
    },
    {
      "title": "Test Widget Resize Functionality",
      "description": "WHY: Users need to adjust widget sizes for better visibility. WHAT: Verify widgets can be resized and display more data.",
      "preconditions": "User is logged into the dashboard with resizable widgets.",
      "steps": [
        {
          "step_number": 1,
          "action": "Hover over the bottom-right corner of a widget.",
          "expected_result": "Resize handle appears.",
          "test_data": null
        },
        {
          "step_number": 2,
          "action": "Click and drag the resize handle to increase the widget size.",
          "expected_result": "Widget size increases, displaying more data.",
          "test_data": null
        },
        {
          "step_number": 3,
          "action": "Release the mouse button to finalize the resize.",
          "expected_result": "Widget remains in the new size, showing additional data.",
          "test_data": null
        }
      ],
      "expected_result": "Widgets can be resized to show more or less data as needed.",
      "priority": "high",
      "test_type": "functional",
      "tags": [
        "widget-resize",
        "data-visibility"
      ],
      "automation_candidate": true,
      "estimated_time": null,
      "risk_level": "medium",
      "related_existing_tests": []
    },
    {
      "title": "Validate Widget Options Dropdown",
      "description": "WHY: Users need to manage widgets efficiently. WHAT: Verify options like delete and duplicate are functional.",
      "preconditions": "User is logged into the dashboard with multiple widgets.",
      "steps": [
        {
          "step_number": 1,
          "action": "Click the options dropdown on a widget.",
          "expected_result": "Dropdown menu appears with options.",
          "test_data": null
        },
        {
          "step_number": 2,
          "action": "Select 'Duplicate' from the dropdown.",
          "expected_result": "A duplicate of the widget appears on the dashboard.",
          "test_data": null
        },
        {
          "step_number": 3,
          "action": "Select 'Delete' on the duplicated widget.",
          "expected_result": "Duplicated widget is removed from the dashboard.",
          "test_data": null
        }
      ],
      "expected_result": "Users can duplicate and delete widgets using the options dropdown.",
      "priority": "medium",
      "test_type": "functional",
      "tags": [
        "widget-options",
        "dropdown"
      ],
      "automation_candidate": true,
      "estimated_time": null,
      "risk_level": "low",
      "related_existing_tests": []
    },
    {
      "title": "Test New Row Creation by Dragging Widgets",
      "description": "WHY: Users need flexibility in dashboard layout. WHAT: Verify new rows can be created by dragging widgets.",
      "preconditions": "User is logged into the dashboard with multiple widgets.",
      "steps": [
        {
          "step_number": 1,
          "action": "Click and hold the drag handle of a widget.",
          "expected_result": "Widget is selected for dragging.",
          "test_data": null
        },
        {
          "step_number": 2,
          "action": "Drag the widget to the bottom of the dashboard.",
          "expected_result": "New row placeholder appears at the bottom.",
          "test_data": null
        },
        {
          "step_number": 3,
          "action": "Release the mouse button to drop the widget.",
          "expected_result": "Widget is placed in a new row at the bottom of the dashboard.",
          "test_data": null
        }
      ],
      "expected_result": "Widgets can be moved to new rows, allowing for flexible layout customization.",
      "priority": "medium",
      "test_type": "functional",
      "tags": [
        "drag-and-drop",
        "new-row"
      ],
      "automation_candidate": true,
      "estimated_time": null,
      "risk_level": "medium",
      "related_existing_tests": []
    },
    {
      "title": "Verify Error State Handling in Dashboard",
      "description": "WHY: Users need clear feedback on errors. WHAT: Verify dashboard displays error states correctly.",
      "preconditions": "Simulate an error condition in the dashboard.",
      "steps": [
        {
          "step_number": 1,
          "action": "Trigger an error by disconnecting from the data source.",
          "expected_result": "Dashboard displays an error message indicating the data source issue.",
          "test_data": null
        },
        {
          "step_number": 2,
          "action": "Attempt to refresh the dashboard.",
          "expected_result": "Error message persists, indicating ongoing issue.",
          "test_data": null
        },
        {
          "step_number": 3,
          "action": "Reconnect the data source and refresh the dashboard.",
          "expected_result": "Dashboard loads successfully without error messages.",
          "test_data": null
        }
      ],
      "expected_result": "Dashboard provides clear feedback and recovers from error states effectively.",
      "priority": "high",
      "test_type": "negative",
      "tags": [
        "error-handling",
        "dashboard"
      ],
      "automation_candidate": true,
      "estimated_time": null,
      "risk_level": "medium",
      "related_existing_tests": []
    },
    {
      "title": "Test Widget Content Display in Small Widgets",
      "description": "WHY: Users need to view content in compact spaces. WHAT: Verify small widgets display content correctly.",
      "preconditions": "User is logged into the dashboard with small widgets enabled.",
      "steps": [
        {
          "step_number": 1,
          "action": "Navigate to a small widget on the dashboard.",
          "expected_result": "Widget displays content in a compact format.",
          "test_data": null
        },
        {
          "step_number": 2,
          "action": "Resize the widget to its smallest size.",
          "expected_result": "Content remains visible and readable.",
          "test_data": null
        },
        {
          "step_number": 3,
          "action": "Expand the widget to a larger size.",
          "expected_result": "Content adjusts and displays more information.",
          "test_data": null
        }
      ],
      "expected_result": "Small widgets display content effectively, even when resized.",
      "priority": "medium",
      "test_type": "functional",
      "tags": [
        "small-widgets",
        "content-display"
      ],
      "automation_candidate": true,
      "estimated_time": null,
      "risk_level": "low",
      "related_existing_tests": []
    },
    {
      "title": "Validate Dashboard Integration with Policies API",
      "description": "WHY: Ensure dashboard reflects policy data accurately. WHAT: Verify integration with Policies API.",
      "preconditions": "Policies API is functional and accessible.",
      "steps": [
        {
          "step_number": 1,
          "action": "Access the dashboard and navigate to the Policies section.",
          "expected_result": "Policies data is loaded and displayed correctly.",
          "test_data": null
        },
        {
          "step_number": 2,
          "action": "Trigger a refresh of the Policies data.",
          "expected_result": "Dashboard updates with the latest Policies data from the API.",
          "test_data": null
        },
        {
          "step_number": 3,
          "action": "Verify the accuracy of the displayed Policies data against the API response.",
          "expected_result": "Displayed data matches the API response accurately.",
          "test_data": null
        }
      ],
      "expected_result": "Dashboard integrates with the Policies API and displays data accurately.",
      "priority": "high",
      "test_type": "integration",
      "tags": [
        "api-integration",
        "policies"
      ],
      "automation_candidate": true,
      "estimated_time": null,
      "risk_level": "high",
      "related_existing_tests": []
    },
    {
      "title": "Test Dashboard Customization Persistence",
      "description": "WHY: Users need their customizations to persist. WHAT: Verify dashboard layout and settings persist after logout.",
      "preconditions": "User is logged into the dashboard and has customized the layout.",
      "steps": [
        {
          "step_number": 1,
          "action": "Customize the dashboard layout by rearranging widgets.",
          "expected_result": "Widgets are rearranged as per user customization.",
          "test_data": null
        },
        {
          "step_number": 2,
          "action": "Log out of the dashboard.",
          "expected_result": "User is logged out successfully.",
          "test_data": null
        },
        {
          "step_number": 3,
          "action": "Log back into the dashboard.",
          "expected_result": "Dashboard layout and settings persist as per previous customization.",
          "test_data": null
        }
      ],
      "expected_result": "Dashboard customizations persist across sessions.",
      "priority": "medium",
      "test_type": "functional",
      "tags": [
        "customization",
        "persistence"
      ],
      "automation_candidate": true,
      "estimated_time": null,
      "risk_level": "medium",
      "related_existing_tests": []
    }
  ],
  "suggested_folder": "PAP/Layout Modernization"
}