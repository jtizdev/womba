{
  "story": {
    "key": "PLAT-11907",
    "summary": "(1.3.1) - PAP - M-APIs - ID alignment - POP",
    "description": "\n PRD review recording \n Share link:   https://zoom.us/rec/share/QNL04XUs6M0jHJmZvJT9XHMWxs70xQ8rGENkvU-9mkoxax1X9N0yUn5P-_3RlMGL.s5rmrGVVLBysM16o    \n Passcode: s12tny+@ \n Problem statement \n The management of managed objects within the platform is inconsistent, affecting the implementation of management APIs and the \"config as code\", \u201cpolicy as code\u201d initiative. \n Specifically when working with SaaS authorization management (orchestration) ids are auto generated and therefore not aligned between envs. this requires manual operations when exporting importing policies between envs  \n Story scope \n This story aims to address the inconsistency by supporting customer defined POP id. Currently, POP id exposed in the UI is the internal id which is auto-generated \n Note: this story defines the behavior of external id and display name, if needed internal id currently exposed in the UI should be kept but hidden from UI  \n Reference PRD: \n The Object Management Guideline PRD outlines the generic guidelines and should be reviewed when implementing this story:  PRD Link  [https://plainid.atlassian.net/wiki/spaces/PM/pages/2501181510/Object+management+guideline]  . \n Detailed requirements \n Existing field Display Name ( PRD updated  [https://plainid.atlassian.net/wiki/spaces/PM/pages/2900623373/PORCH+-+POP+Management#3.1.1-Generic-Fileds]  ) \n Label: Display Name (no change) \n Display order - first on list (no change) \n Field type: free txt (no change) \n Required: yes (no change) \n Editable: Yes (no change) , updated to POP name should trigger update to application and scope  (no change to existing behavior) as defined in  https://plainid.atlassian.net/wiki/spaces/PM/pages/2944925733/PORCH+-+Application+Scope+-+Discover+Map+-+Generic+behavior#5.-Scenarios-and-Expected-Behaviors  \n Unique: Per env - case sensitive (no change) \n Default: Vendor # Name of the vendor - after (no change) \n allowed chars: All (no change) \n Max length: 100 chars (no change) \n New field POP ID  ( PRD updated  [https://plainid.atlassian.net/wiki/spaces/PM/pages/edit-v2/2443935770#2.1.1-Application-External-ID]  ) - till now used the internal id should generate a new field internal id should be used for internal processes only \n Label: POP ID  \n Display order - second on list below name above description \n Field type: free txt  \n Required: yes  \n Editable: Yes, updated to POP id should trigger update to application id   https://plainid.atlassian.net/wiki/spaces/PM/pages/2944925733/PORCH+-+Application+Scope+-+Discover+Map+-+Generic+behavior#5.-Scenarios-and-Expected-Behaviors    \n Unique:  Per env - case sensitive \n Default: should be auto-populated by name field as described in generic behavior   https://plainid.atlassian.net/wiki/spaces/PM/pages/2501181510/Object+management+guideline#5.-UI%5CUX-experience---auto-populate-customer-defined-id  \n allowed chars  :  the definition is identical to  HTML IDs  [https://www.w3.org/TR/html4/types.html#type-id]   (without the ordering requirement): letters (a-z, A-Z), digits (0-9), hyphens (\"-\"), underscores (\"_\"), colons (\":\"), and periods (\".\"). Validation regex:  [a-zA-Z0-9_:.-]+   \n Max length: 128 chars  \n M-APIs - our current management apis utilizing internal POP ID should use external POP ID \n POP Create-   https://docs.plainid.io/apidocs/create-pop   on create POP user should be able to define the POP ID (need also to update swager) \n Update POP -   https://docs.plainid.io/apidocs/update-pop    \n get list of POPs -   https://docs.plainid.io/apidocs/get-pop-list    \n get vendor policy by id -   https://docs.plainid.io/apidocs/get-policy-vendor-ids    \n discover now -   https://docs.plainid.io/apidocs/run-discovery    \n deploy policy to vendor -   https://docs.plainid.io/apidocs/deploy-pop-policy-to-vendor    \n override policy -   https://docs.plainid.io/apidocs/override-plainid-policy    \n Migration \n for all existing POPs should use internal id for external id \n Accepted criteria \n Provide swagger of v2.0 APIs to product \n Validate behavior and flows for new and existing POPs (specifically PaC and edit id are the important ones) \n make sure to conduct tests when internal ID and External id are different \n for migrated POPs - following migration no change in behavior , but external ID can be updated and full behavior as expected \n UI\\UX new experience + API behavior according to requirements \n Validate edit flows \n display name (no regression impact scope and app names) \n id (impact app id) \n Validate export import policies between envs for orchestration does not require manual step as defined in   https://plainid.atlassian.net/wiki/spaces/PM/pages/3540451329/Policy+Schema#3.11.1.2-Migration-between-envs    \n No regression in existing POPs ",
    "status": "In Development",
    "priority": "High"
  },
  "summary": "These tests verify the functionality of managing custom POP IDs, ensuring seamless integration, error handling, and backward compatibility in the PlainID Management APIs.",
  "test_cases": [
    {
      "title": "Create POP with custom ID and verify deployment",
      "description": "WHY: Users need to create POPs with custom IDs for specific deployments. WHAT: Verify custom ID creation and deployment functionality.",
      "preconditions": "User has Management API credentials. No POP with ID 'custom-pop-001' exists.",
      "steps": [
        {
          "step_number": 1,
          "action": "POST /pops with body {'id': 'custom-pop-001', 'name': 'Custom POP', 'type': 'AWS'}",
          "expected_result": "POP created successfully, response includes custom ID 'custom-pop-001'",
          "test_data": "id: 'custom-pop-001'"
        },
        {
          "step_number": 2,
          "action": "Deploy a policy targeting POP ID 'custom-pop-001'",
          "expected_result": "Policy deploys successfully to the custom POP",
          "test_data": "policy: custom_policy.json"
        },
        {
          "step_number": 3,
          "action": "Verify policy is active on AWS using POP 'custom-pop-001'",
          "expected_result": "Policy is enforced in AWS",
          "test_data": null
        }
      ],
      "expected_result": "End-to-end workflow works: create custom POP \u2192 deploy policy \u2192 verify enforcement",
      "priority": "critical",
      "test_type": "functional",
      "tags": [
        "custom-pop-id",
        "happy-path",
        "deployment"
      ],
      "automation_candidate": true,
      "estimated_time": null,
      "risk_level": "high",
      "related_existing_tests": []
    },
    {
      "title": "Attempt to create POP with duplicate custom ID shows clear error",
      "description": "WHY: Users might try to reuse an ID. WHAT: Verify system prevents duplicates and gives actionable error message.",
      "preconditions": "POP with custom ID 'duplicate-pop' already exists.",
      "steps": [
        {
          "step_number": 1,
          "action": "POST /pops with body {'id': 'duplicate-pop', 'name': 'Duplicate POP'}",
          "expected_result": "HTTP 409 Conflict with error: 'POP ID duplicate-pop already exists in this environment'",
          "test_data": "id: 'duplicate-pop'"
        }
      ],
      "expected_result": "Clear error message helps user understand the problem and how to fix it",
      "priority": "high",
      "test_type": "negative",
      "tags": [
        "custom-pop-id",
        "error-handling",
        "uniqueness"
      ],
      "automation_candidate": true,
      "estimated_time": null,
      "risk_level": "medium",
      "related_existing_tests": []
    },
    {
      "title": "Export policy from dev environment and import to prod with custom POP ID",
      "description": "WHY: Ensure seamless policy migration between environments. WHAT: Verify export/import workflow with custom POP IDs.",
      "preconditions": "Dev environment has POP 'shared-pop-002'. Prod environment does not have this POP.",
      "steps": [
        {
          "step_number": 1,
          "action": "Export policy from dev that references POP 'shared-pop-002'",
          "expected_result": "Export file contains POP ID 'shared-pop-002'",
          "test_data": "export_dev_policy.json"
        },
        {
          "step_number": 2,
          "action": "Create POP in prod with same ID 'shared-pop-002'",
          "expected_result": "POP created in prod",
          "test_data": null
        },
        {
          "step_number": 3,
          "action": "Import policy to prod",
          "expected_result": "Policy imports successfully, references prod POP 'shared-pop-002', no manual ID mapping needed",
          "test_data": "import to prod"
        }
      ],
      "expected_result": "Policy migrates seamlessly between environments using consistent custom POP IDs",
      "priority": "critical",
      "test_type": "integration",
      "tags": [
        "custom-pop-id",
        "export-import",
        "cross-env"
      ],
      "automation_candidate": true,
      "estimated_time": null,
      "risk_level": "high",
      "related_existing_tests": []
    },
    {
      "title": "Update existing POP with new custom ID and verify application update",
      "description": "WHY: Users may need to update POP IDs. WHAT: Verify that updating the POP ID triggers the correct application ID update.",
      "preconditions": "POP 'update-pop-001' exists with application linked.",
      "steps": [
        {
          "step_number": 1,
          "action": "PUT /pops/update-pop-001 with body {'id': 'new-pop-id-001'}",
          "expected_result": "POP ID updated successfully, application ID linked to POP is also updated",
          "test_data": "id: 'new-pop-id-001'"
        },
        {
          "step_number": 2,
          "action": "Verify application linked to POP 'new-pop-id-001' reflects the updated ID",
          "expected_result": "Application ID is 'new-pop-id-001'",
          "test_data": null
        }
      ],
      "expected_result": "POP ID update triggers application ID update correctly",
      "priority": "high",
      "test_type": "functional",
      "tags": [
        "custom-pop-id",
        "update",
        "application"
      ],
      "automation_candidate": true,
      "estimated_time": null,
      "risk_level": "medium",
      "related_existing_tests": []
    },
    {
      "title": "Verify uniqueness validation for custom POP ID",
      "description": "WHY: Ensure POP IDs remain unique across environments. WHAT: Verify uniqueness validation prevents duplicate IDs.",
      "preconditions": "Environment has POP 'unique-pop-001'.",
      "steps": [
        {
          "step_number": 1,
          "action": "Attempt to create another POP with ID 'unique-pop-001'",
          "expected_result": "HTTP 409 Conflict with error: 'POP ID unique-pop-001 already exists in this environment'",
          "test_data": "id: 'unique-pop-001'"
        }
      ],
      "expected_result": "System prevents creation of duplicate POP IDs with clear error message",
      "priority": "high",
      "test_type": "negative",
      "tags": [
        "custom-pop-id",
        "validation",
        "uniqueness"
      ],
      "automation_candidate": true,
      "estimated_time": null,
      "risk_level": "medium",
      "related_existing_tests": []
    },
    {
      "title": "Backward compatibility test for existing POPs after migration",
      "description": "WHY: Ensure existing POPs function correctly post-migration. WHAT: Verify no regression in behavior for migrated POPs.",
      "preconditions": "Existing POPs have been migrated to use external IDs.",
      "steps": [
        {
          "step_number": 1,
          "action": "List all POPs in the environment",
          "expected_result": "All POPs are listed with their new external IDs",
          "test_data": null
        },
        {
          "step_number": 2,
          "action": "Verify that policies linked to these POPs still function as expected",
          "expected_result": "Policies are enforced correctly without any issues",
          "test_data": null
        }
      ],
      "expected_result": "No regression in behavior for existing POPs post-migration",
      "priority": "medium",
      "test_type": "regression",
      "tags": [
        "custom-pop-id",
        "migration",
        "backward-compatibility"
      ],
      "automation_candidate": true,
      "estimated_time": null,
      "risk_level": "low",
      "related_existing_tests": []
    }
  ],
  "suggested_folder": "Orchestration WS/POP Management"
}